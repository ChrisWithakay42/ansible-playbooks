---
# Play 0: Install prerequisites on all nodes
- name: Install prerequisites
  hosts: all
  become: yes
  gather_facts: no
  tasks:
    - name: Ensure iptables is installed
      ansible.builtin.package:
        name:
          - iptables
          - open-iscsi
        state: present

# Play 1: Install the first master
- name: Install first master node
  hosts: k3s_masters[0]
  become: yes
  gather_facts: yes
  vars:
    kubeconfig_user: pi
    k3s_base_config: |
      flannel-backend: "none"
      disable-kube-proxy: true
      disable-network-policy: true
      cluster-init: true
      disable:
        - servicelb
        - traefik
  tasks:
    - name: Create k3s configuration directory
      ansible.builtin.file:
        path: /etc/rancher/k3s
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Write base k3s config to the master
      ansible.builtin.copy:
        content: "{{ k3s_base_config }}"
        dest: /etc/rancher/k3s/config.yaml
        owner: root
        group: root
        mode: '0644'

    - name: Download k3s installer script
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-installer.sh
        mode: '0755'

    - name: Install k3s on the primary master
      ansible.builtin.command: /tmp/k3s-installer.sh
      args:
        creates: /etc/systemd/system/k3s.service

    - name: Create .kube directory for the remote user
      ansible.builtin.file:
        path: "/home/{{ kubeconfig_user }}/.kube"
        state: directory
        owner: "{{ kubeconfig_user }}"
        group: "{{ kubeconfig_user }}"
        mode: '0755'
      become: no

    - name: Copy k3s.yaml to user's kube config and set ownership
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "/home/{{ kubeconfig_user }}/.kube/config"
        remote_src: yes
        owner: "{{ kubeconfig_user }}"
        group: "{{ kubeconfig_user }}"
        mode: '0600'

    - name: Replace localhost with master IP in kubeconfig
      ansible.builtin.command:
        cmd: "sed -i 's/127.0.0.1/{{ ansible_host }}/g' /home/{{ kubeconfig_user }}/.kube/config"
      become: no

    - name: Wait for k3s server on control-0 to be ready
      ansible.builtin.command:
        cmd: "kubectl get nodes"
      environment:
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      retries: 30
      delay: 10
      until: "result.rc == 0"
      register: result
      changed_when: false

# Play 2: Fetch the node token
- name: Fetch the node-token from the first master
  hosts: k3s_masters[0]
  become: yes
  tasks:
    - name: Wait for node-token to be created
      ansible.builtin.wait_for:
        path: /var/lib/rancher/k3s/server/node-token
        timeout: 60

    - name: Read the node-token
      ansible.builtin.slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: node_token_raw

    - name: Set token as a fact for other plays
      ansible.builtin.set_fact:
        k3s_node_token: "{{ node_token_raw['content'] | b64decode | trim }}"
        cacheable: yes

# Play 3: Install other masters and agents
- name: Install other nodes
  hosts: k3s_masters:!{{ groups['k3s_masters'][0] }}, k3s_agents
  become: yes
  vars:
    token: "{{ hostvars[groups['k3s_masters'][0]]['k3s_node_token'] }}"
    master_ip: "{{ hostvars[groups['k3s_masters'][0]]['ansible_host'] | default(hostvars[groups['k3s_masters'][0]]['inventory_hostname']) }}"
  tasks:
    - name: Create k3s configuration directory on joining nodes
      ansible.builtin.file:
        path: /etc/rancher/k3s
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create k3s config.yaml for other masters
      ansible.builtin.copy:
        content: |
          server: https://{{ master_ip }}:6443
          token: {{ token }}
          flannel-backend: "none"
          disable-kube-proxy: true
        dest: /etc/rancher/k3s/config.yaml
        owner: root
        group: root
        mode: '0644'
      when: inventory_hostname in groups['k3s_masters']

    - name: Create k3s config.yaml for agent nodes
      ansible.builtin.copy:
        content: |
          server: https://{{ master_ip }}:6443
          token: {{ token }}
        dest: /etc/rancher/k3s/config.yaml
        owner: root
        group: root
        mode: '0644'
      when: inventory_hostname in groups['k3s_agents']

    - name: Download k3s installer script on joining nodes
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-installer.sh
        mode: '0755'

    # - name: Install k3s on other masters
    #   ansible.builtin.command: /tmp/k3s-installer.sh server
    #   args:
    #     creates: /etc/systemd/system/k3s.service
    #   when: inventory_hostname in groups['k3s_masters']

    - name: Install k3s on agent nodes
      ansible.builtin.command: /tmp/k3s-installer.sh agent
      args:
        creates: /etc/systemd/system/k3s-agent.service
      when: inventory_hostname in groups['k3s_agents']


# Play 4: Install and Validate Cilium CNI
- name: Install and Validate Cilium CNI
  hosts: k3s_masters[0]
  become: yes
  gather_facts: yes
  vars:
    kubeconfig_user: pi
    cilium_cli_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"
  tasks:
    - name: Download Cilium CLI for the correct architecture
      ansible.builtin.get_url:
        url: "https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-{{ cilium_cli_arch }}.tar.gz"
        dest: "/tmp/cilium-linux-{{ cilium_cli_arch }}.tar.gz"
        mode: '0644'

    - name: Unarchive Cilium CLI to /usr/local/bin
      ansible.builtin.unarchive:
        src: "/tmp/cilium-linux-{{ cilium_cli_arch }}.tar.gz"
        dest: "/usr/local/bin"
        remote_src: yes
        owner: root
        group: root
        mode: '0755'

    - name: Install Cilium with recommended settings
      ansible.builtin.command:
        cmd: >
          /usr/local/bin/cilium install
          --namespace kube-system
          # Required for k3s with kube-proxy disabled
          --set kubeProxyReplacement=true
          --set k8sServiceHost={{ ansible_default_ipv4.address }}
          --set k8sServicePort=6443
          --set l2announcements.enabled=true
          --set externalIPs.enabled=true
          --set hubble.relay.enabled=true
          --set hubble.ui.enabled=true
          --set loadBalancer.algorithm=maglev
          --set ipam.mode=kubernetes
          --set ingressController.enabled=true
          --set ingressController.loadbalancer.mode=shared
          --set ingressController.service.type=LoadBalancer
      environment:
        KUBECONFIG: "/home/{{ kubeconfig_user }}/.kube/config"
      register: cilium_install_result
      changed_when: "'already installed' not in cilium_install_result.stderr"
      become: no

    - name: Validate Cilium Installation
      ansible.builtin.command:
        cmd: "/usr/local/bin/cilium status --wait"
      environment:
        KUBECONFIG: "/home/{{ kubeconfig_user }}/.kube/config"
      register: cilium_status
      until: cilium_status.rc == 0
      retries: 10
      delay: 30
      become: no

# Play 5: Fetch kubeconfig to local machine
- name: Fetch kubeconfig to local machine
  hosts: k3s_masters[0]
  gather_facts: no
  vars:
    kubeconfig_user: pi
  tasks:
    - name: Remove existing local kubeconfig if it exists
      ansible.builtin.file:
        path: "~/.kube/config"
        state: absent
      delegate_to: localhost

    - name: Fetch the modified kubeconfig from the master
      ansible.builtin.fetch:
        src: "/home/{{ kubeconfig_user }}/.kube/config"
        dest: "~/.kube/config"
        flat: yes
